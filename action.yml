name: CMake - Build and Test
author: Daniel Pfeifer
description: Build and Test any CMake Project
branding:
  icon: compass
  color: orange
inputs:
  build-name:
    description: Describe the dashboard client platform with a short string.
    required: false
    default: ${{ github.job }}
  cmake-generator:
    description: Specify a build system generator
    required: false
    default: Unix Makefiles
  coverage-command:
    description: Command-line tool to perform software coverage analysis
    required: false
    default: ""
  memorycheck-command:
    description: Command-line tool to perform dynamic analysis
    required: false
    default: ""
  memorycheck-type:
    description: Specify the type of memory checking to perform
    required: false
    default: ""
  submit-url:
    description: The URL of the dashboard server to send the submission to
    required: false
    default: ""
  use-launchers:
    description: Use the CTest script mode to run tests
    required: false
    default: OFF
outputs:
  build-errors:
    description: Store the number of build errors detected
    value: ${{ steps.main.outputs.build-errors }}
  build-warnings:
    description: Store the number of build warnings detected
    value: ${{ steps.main.outputs.build-warnings }}
  memcheck-defects:
    description: Store the number of memcheck defects found
    value: ${{ steps.main.outputs.memcheck-defects }}
runs:
  using: composite
  steps:
    - id: main
      shell: ctest --build-config Debug --verbose --script {0}
      run: |
        cmake_minimum_required(VERSION 3.14)

        set(CTEST_SITE "github.com")
        set(CTEST_CHANGE_ID "${{ github.sha }}")
        set(CTEST_BUILD_NAME "${{ inputs.build-name }}")
        set(CTEST_SOURCE_DIRECTORY "$ENV{GITHUB_WORKSPACE}")
        set(CTEST_BINARY_DIRECTORY "$ENV{GITHUB_WORKSPACE}/build")
        set(CTEST_CMAKE_GENERATOR "${{ inputs.cmake-generator }}")
        set(CTEST_COVERAGE_COMMAND "${{ inputs.coverage-command }}")
        set(CTEST_MEMORYCHECK_COMMAND "${{ inputs.memorycheck-command }}")
        set(CTEST_MEMORYCHECK_TYPE "${{ inputs.memorycheck-type }}")
        set(CTEST_SUBMIT_URL "${{ inputs.submit-url }}")
        set(CTEST_USE_LAUNCHERS "${{ inputs.use-launchers }}")

        cmake_host_system_information(RESULT NPROC QUERY NUMBER_OF_LOGICAL_CORES)

        function(submit part)
          if(CTEST_SUBMIT_URL)
            ctest_submit(PARTS "${part}")
          endif()
        endfunction()

        ctest_start("Experimental")
        submit("Start")

        ctest_configure()
        submit("Configure")

        ctest_build(
          PARALLEL_LEVEL ${NPROC}
          NUMBER_ERRORS build_errors
          NUMBER_WARNINGS build_warnings
          )
        file(APPEND $ENV{GITHUB_OUTPUT}
          "build-errors=${build_errors}\n"
          "build-warnings=${build_warnings}\n"
          )
        submit("Build")

        if(CTEST_MEMORYCHECK_COMMAND OR CTEST_MEMORYCHECK_TYPE)
          ctest_memcheck(
            PARALLEL_LEVEL ${NPROC}
            DEFECT_COUNT memcheck_defects
            )
          file(APPEND $ENV{GITHUB_OUTPUT}
            "memcheck-defects=${memcheck_defects}\n"
            )
          submit("MemCheck")
        else()
          ctest_test(PARALLEL_LEVEL ${NPROC})
          submit("Test")
        endif()

        if(CTEST_COVERAGE_COMMAND)
          ctest_coverage()
          submit("Coverage")
        endif()

        submit("Done")
